{"version":3,"sources":["map/components/MapChart.js","logo.svg","map/components/table.js","map/index.js","DataMg/dataprovider/index.js","DataMg/databases/index.js","DataMg/index.js","App.js","reportWebVitals.js","index.js"],"names":["url","DOMParser","a","fetch","then","response","text","xml","kml","parseFromString","getAllFisheriesBycountry","name","json","jsons","filter","e","fishery_name","replaceAll","split","indexOf","res","console","log","togeoJSON","MapChart","setTooltipContent","setRows","useState","Aria","setAria","data-tip","projectionConfig","scale","geography","geographies","map","geo","onMouseEnter","num","properties","NAME","POP_EST","Math","round","onMouseLeave","onClick","i","id","style","default","fill","outline","hover","pressed","rsmKey","memo","DataTable","rows","x","y","width","height","data","wordWrap","fontSize","resizable","align","padding","margin","maxWidth","display","alignItems","justifyContent","dataKey","Map","props","content","setContent","DbList","resource","params","Promise","BookIcon","List","Datagrid","TextField","source","DateField","EditButton","basePath","DataMg","Admin","dataProvider","Resource","list","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uJAyBeA,E,kDCzBA,I,4EDWF,IAAIC,U,4CAEjB,0CAAAC,EAAA,6DAAyBF,EAAzB,+BAA+B,GAA/B,SAEyBG,MAAMH,GAC5BI,MAAK,SAASC,GACb,OAAOA,EAASC,UAEjBF,MAAK,SAASG,GACb,OAAOC,eAAI,IAAIP,WAAYQ,gBAAgBF,EAAK,gBAPpD,cAEQF,EAFR,yBAUOA,GAVP,4C,+BAeeK,E,8EAAf,WAAwCC,GAAxC,eAAAT,EAAA,sEAEyBC,MAAM,mBAC5BC,MAAK,SAASC,GACb,OAAOA,EAASO,UAEjBR,MAAK,SAASS,GACb,OAAOA,EAAMC,QAAO,SAAAC,GAAC,OAAwE,IAAtEA,EAAEC,aAAaC,WAAW,KAAK,IAAIC,MAAM,KAAKC,QAA9C,UAAyDR,UAPpF,cAEQN,EAFR,yBAUOA,GAVP,4C,sBAYAK,EAAyB,WAAWN,MAAK,SAAAgB,GACvCC,QAAQC,IAAIF,M,0CAEdG,EAlBevB,EAkBC,qFAjBT,uCAAuCA,IAiByDI,MAAK,SAAAgB,GAC1GC,QAAQC,IAAIF,MAGd,IAUMI,EAAW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,kBAAmBC,EAAa,EAAbA,QAAa,EAC1BC,qBAD0B,mBAC3CC,EAD2C,KACtCC,EADsC,KAElD,OACE,mCACE,cAAC,gBAAD,CAAeC,WAAS,GAAGC,iBAAkB,CAAEC,MAAO,KAAtD,SACE,cAAC,gBAAD,UACE,cAAC,cAAD,CAAaC,UAnDR,oBAmDL,SACG,qBAAGC,YACUC,KAAI,SAAAC,GAAG,OACjB,cAAC,YAAD,CAEEH,UAAWG,EACXC,aAAc,WAAO,IAtBvBC,EAsBsB,EACQF,EAAIG,WAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,QACdhB,EAAkB,CAACnB,KAAK,GAAD,OAAIkC,EAAJ,oBAxB3BF,EAwBiDG,EAvB3DH,EAAM,IACDI,KAAKC,MAAML,EAAM,KAAa,GAAK,KACjCA,EAAM,IACRI,KAAKC,MAAML,EAAM,KAAU,GAAK,IAEhCI,KAAKC,MAAML,EAAM,KAAO,GAAK,SAoBtBM,aAAc,WACZnB,EAAkB,KAEpBoB,QACE,WAAO,IAAD,EACsBT,EAAIG,WAAtBC,EADJ,EACIA,KADJ,EACUC,QACd/B,EAAyB8B,GAAMpC,MAAK,SAAAgB,GAClC,IAAI0B,EAAE,EACFlB,IAASY,GACXd,EAAQ,IAEVG,EAAQW,GACRd,EAAQN,EAAIe,KAAI,SAAApB,GAAC,OAAI,aAACgC,GAAGD,KAAO/B,WAItCiC,MAAO,CACLC,QAAS,CACPC,KAAM,UACNC,QAAS,QAEXC,MAAO,CACLF,KAAM,OACNC,QAAS,QAEXE,QAAS,CACPH,KAAM,OACNC,QAAS,UAjCRf,EAAIkB,qBA8CZC,iBAAK/B,G,wBEpDLgC,EAhDG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAElB,OADApC,QAAQC,IAAImC,GACL,mCACN,cAAC,IAAD,CACCR,QAAS,CACLS,EAAG,EACHC,EAAG,EACHC,MAAO,IACPC,OAAO,KALZ,SAQD,eAAC,IAAD,CAAOC,KAAML,EAAMM,UAAQ,EAC1Bf,MAAO,CAACgB,SAAS,QACjBH,OAAQ,IAFT,UAIE,eAAC,IAAD,CAAQD,MAAO,IAAMK,WAAS,EAACC,MAAO,SACjClB,MAAO,CAACmB,QAAQ,QAAQC,OAAO,QAAQR,MAAM,QAAQS,SAAS,OAASC,QAAS,OAChFC,WAAY,SACZC,eAAgB,UAHrB,UAIE,cAAC,IAAD,0CACA,cAAC,IAAD,CAAMC,QAAQ,kBAGhB,eAAC,IAAD,CAAQb,MAAO,IAAKM,MAAO,SAC1BlB,MAAO,CAACmB,QAAQ,QAAQC,OAAO,QAAQR,MAAM,QAAQS,SAAS,OAASC,QAAS,OAChFC,WAAY,SACZC,eAAgB,UACjBP,WAAS,EAJT,UAKE,cAAC,IAAD,+DACA,cAAC,IAAD,CAAMQ,QAAQ,oBAGhB,eAAC,IAAD,CAAQb,MAAO,IAAKM,MAAO,SAAYD,WAAS,EAC3CjB,MAAO,CAACmB,QAAQ,QAAQC,OAAO,QAAQR,MAAM,QAAQS,SAAS,OAASC,QAAS,OACjFC,WAAY,SACZC,eAAgB,UAHpB,UAIE,cAAC,IAAD,6CACA,cAAC,IAAD,CAAMC,QAAQ,iCC1CLC,EACf,SAAaC,GAAQ,IAAD,EACchD,mBAAS,IADvB,mBACTiD,EADS,KACAC,EADA,OAEQlD,mBAAS,IAFjB,mBAET8B,EAFS,KAEH/B,EAFG,KAGhB,OACI,gCACI,cAAC,EAAD,CAAUD,kBAAmBoD,EAAYnD,QAASA,IAClD,cAAC,IAAD,UACKkD,EAAQtE,OAEb,cAAC,EAAD,CAAWmD,KAAMA,Q,sBClBd,GACXqB,OAAW,SAACC,EAAUC,GAAX,OAAsBC,U,2FCMxBH,G,OAFWI,EAEF,SAACP,GAAD,OAClB,cAACQ,EAAA,EAAD,2BAAUR,GAAV,aACI,eAACS,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,cAACC,EAAA,EAAD,CAAWD,OAAO,iBAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,iBAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,UAClB,cAACE,EAAA,EAAD,CAAYC,SAAS,mBCAlBC,EANA,kBACX,cAACC,EAAA,EAAD,CAAOC,aAAcA,EAArB,SACI,cAACC,EAAA,EAAD,CAAUlF,KAAK,WAAWmF,KAAMhB,O,gBCqBzBiB,MAnBf,WACE,OACE,mCACA,cAAC,IAAD,UACA,eAAC,IAAD,WAIE,cAAC,IAAD,CAAOC,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,cCbOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/F,MAAK,YAAkD,IAA/CgG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fbf115bd.chunk.js","sourcesContent":["import React, { memo,useState } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\n//import fs from 'fs';\n// import {DOMParser}from 'xmldom';\nimport {kml} from '@tmcw/togeojson'\nvar parser = new DOMParser();\nconst geoUrl = \"./world-110m.json\";\nasync function togeoJSON(url = '') {\n  // Default options are marked with *\n  const response = await fetch(url)\n  .then(function(response) {\n    return response.text();\n  })\n  .then(function(xml) {\n    return kml(new DOMParser().parseFromString(xml, \"text/xml\"))\n  });\n//  return new DOMParser().parseFromString(response, 'text/xml') // parses JSON response into native JavaScript objects\nreturn response\n}\nfunction proxy(url){\nreturn 'https://cors-anywhere.herokuapp.com/'+url\n}\nasync function getAllFisheriesBycountry(name) {\n  // Default options are marked with *\n  const response = await fetch('./feshries.json')\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(jsons) {\n    return jsons.filter(e=>e.fishery_name.replaceAll(/ /g,'').split('|').indexOf(`${name}`) !== -1)\n  });\n//  return new DOMParser().parseFromString(response, 'text/xml') // parses JSON response into native JavaScript objects\nreturn response\n}\ngetAllFisheriesBycountry('Morocco').then(res=>{\n  console.log(res);\n})\ntogeoJSON(proxy('https://s3.amazonaws.com/fs4.fishsource.org/uploads/map/kml_path/31/US_Scallop.kml')).then(res=>{\n  console.log(res)\n})\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({ setTooltipContent, setRows}) => {\n  const [Aria,setAria] =  useState()\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    setTooltipContent({text:`${NAME} — ${rounded(POP_EST)}`});\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  onClick={\n                    () => {\n                      const { NAME, POP_EST } = geo.properties;\n                      getAllFisheriesBycountry(NAME).then(res=>{\n                        var i=0;\n                        if (Aria === NAME){\n                          setRows([])\n                        }\n                        setAria(NAME) \n                        setRows(res.map(e=>e={id:i++,...e}));\n                      })\n                    }\n                  }\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import * as React from 'react';\nimport { Table, Column, HeaderCell, Cell } from 'rsuite-table';\nimport { Rnd } from 'react-rnd';\n// import 'rsuite-table/dist/css/rsuite-table.css'\n\n\n\nconst ImageCell = ({ rowData, dataKey, ...rest }) => (\n  <Cell {...rest}>\n    <img src={rowData[dataKey]} width=\"50\" />\n  </Cell>\n);\n\nconst DataTable = ({rows}) => {\n  console.log(rows);\n  return(<>\n   <Rnd \n    default={{\n        x: 0,\n        y: 0,\n        width: 400,\n        height:300\n       }}\n         >\n  <Table data={rows} wordWrap\n   style={{fontSize:'.6em'}}\n   height={300} \n  >\n    <Column width={100}  resizable align={'center'} \n         style={{padding:'unset',margin:'unset',width:'200px',maxWidth:'100%'  ,display: 'flex',\n         alignItems: 'center',\n         justifyContent: 'center'}} >\n      <HeaderCell>код(fao.org)</HeaderCell>\n      <Cell dataKey=\"fishery_id\"  />\n    </Column>\n\n    <Column width={200} align={'center'} \n     style={{padding:'unset',margin:'unset',width:'200px',maxWidth:'100%'  ,display: 'flex',\n     alignItems: 'center',\n     justifyContent: 'center'}}\n    resizable>\n      <HeaderCell>промысла</HeaderCell>\n      <Cell dataKey=\"fishery_name\"   />\n    </Column>\n\n    <Column width={100} align={'center'}   resizable\n         style={{padding:'unset',margin:'unset',width:'200px',maxWidth:'100%'  ,display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'}}>\n      <HeaderCell>запас</HeaderCell>\n      <Cell dataKey='exploiting_stocks' />\n    </Column>\n\n    {/* <Column width={100} resizable>\n      <HeaderCell>map_info</HeaderCell>\n      <ImageCell dataKey=\"map_info\" />\n    </Column> */}\n  </Table>\n  </Rnd>\n  </>)\n};\nexport default DataTable;","import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport MapChart from \"./components/MapChart\";\nimport DataTable from './components/table'\nimport {\n    Link,\n    useRouteMatch,\n} from \"react-router-dom\";\nexport default Map;\nfunction Map(props) {\n    const [content, setContent] = useState({});\n    const [rows, setRows] = useState([]);\n    return (\n        <div>\n            <MapChart setTooltipContent={setContent} setRows={setRows}/>\n            <ReactTooltip>\n                {content.text}\n            </ReactTooltip>\n            <DataTable rows={rows} />\n        </div>\n    );\n}","export default {\n    DbList:    (resource, params) => Promise,\n}\n","\n// in databases.js\nimport * as React from \"react\";\nimport { List, Datagrid, Edit, Create, SimpleForm, DateField, TextField, EditButton, TextInput, DateInput } from 'react-admin';\nimport BookIcon from '@material-ui/icons/Book';\nexport const PostIcon = BookIcon;\n\nexport const DbList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"title\" />\n            <DateField source=\"published_at\" />\n            <TextField source=\"average_note\" />\n            <TextField source=\"views\" />\n            <EditButton basePath=\"/posts\" />\n        </Datagrid>\n    </List>\n);\n\nconst PostTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const PostEdit = (props) => (\n    <Edit title={<PostTitle />} {...props}>\n        <SimpleForm>\n            <TextInput disabled source=\"id\" />\n            <TextInput source=\"title\" />\n            <TextInput source=\"teaser\" options={{ multiLine: true }} />\n            <TextInput multiline source=\"body\" />\n            <DateInput label=\"Publication date\" source=\"published_at\" />\n            <TextInput source=\"average_note\" />\n            <TextInput disabled label=\"Nb views\" source=\"views\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const PostCreate = (props) => (\n    <Create title=\"Create a Post\" {...props}>\n        <SimpleForm>\n            <TextInput source=\"title\" />\n            <TextInput source=\"teaser\" options={{ multiLine: true }} />\n            <TextInput multiline source=\"body\" />\n            <TextInput label=\"Publication date\" source=\"published_at\" />\n            <TextInput source=\"average_note\" />\n        </SimpleForm>\n    </Create>\n);","import { Admin, Resource } from 'react-admin';\nimport dataProvider from './dataprovider';\nimport { DbList } from './databases';\nimport React from 'react';\n// import simpleRestProvider from './ra-strapi-rest';\n\n\n// const dataProvider = simpleRestProvider('http://localhost:1337');\n\nconst DataMg = () => (\n    <Admin dataProvider={dataProvider}>\n        <Resource name=\"contries\" list={DbList} />\n    </Admin>\n);\n\nexport default DataMg;","import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport Map from \"./map\"\nimport DataMg from \"./DataMg\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nfunction App() {\n  return (\n    <>\n    <Router>\n    <Switch>\n      {/* <Route path=\"/about\">\n        <About />\n      </Route> */}\n      <Route path=\"/datamg\">\n        <DataMg />\n      </Route>\n      <Route path=\"/\">\n        <Map />\n      </Route>\n    </Switch>\n   </Router>\n    </>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}