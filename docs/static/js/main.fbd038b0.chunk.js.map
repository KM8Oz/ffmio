{"version":3,"sources":["logo.svg","map/components/MapChart.js","map/components/table.js","map/index.js","DataMg/dataprovider/index.js","DataMg/databases/index.js","DataMg/index.js","App.js","reportWebVitals.js","index.js"],"names":["DOMParser","a","url","fetch","then","response","text","xml","kml","parseFromString","name","json","jsons","filter","e","fishery_name","replaceAll","split","indexOf","MapChart","setTooltipContent","setRows","fisheries","useState","Aria","setAria","fisherie","setFisherie","typographies","setTypographies","JSON","stringify","console","log","togeoJSON","map_info","res","features","geometry","coordinates","map","geo","index","r","fill","data-tip","projectionConfig","scale","geography","geographies","onMouseEnter","properties","ABBREV","CONTINENT","FORMAL_EN","GDP_MD_EST","GDP_YEAR","ISO_A2","ISO_A3","NAME","NAME_LONG","POP_EST","POP_RANK","POP_YEAR","REGION_UN","SUBREGION","onMouseLeave","onClick","getAllFisheriesBycountry","i","id","style","default","outline","hover","pressed","rsmKey","memo","initialState","icon","AddCircle","position","status","reducer","switcher","action","type","RemoveCircle","Error","DataTable","rows","setFisheries","table","useRef","useReducer","dispatch","dragHandleClassName","x","y","width","height","ref","data","wordWrap","fontSize","align","padding","margin","maxWidth","display","alignItems","justifyContent","dataKey","evt","target","rowData","rowIndex","IconButton","aria-label","Map","props","content","setContent","place","effect","DbList","resource","params","Promise","BookIcon","List","Datagrid","TextField","source","DateField","EditButton","basePath","DataMg","Admin","dataProvider","Resource","list","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbd038b0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { memo, useState } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\n//import fs from 'fs';\n// import {DOMParser}from 'xmldom';\nimport { kml } from '@tmcw/togeojson'\nvar parser = new DOMParser();\nconst geoUrl = \"./world-110m.json\";\nasync function togeoJSON(url = '') {\n  // Default options are marked with *\n  const response = await fetch(url)\n    .then(function (response) {\n      return response.text();\n    })\n    .then(function (xml) {\n      return kml(new DOMParser().parseFromString(xml, \"text/xml\"))\n    });\n  //  return new DOMParser().parseFromString(response, 'text/xml') // parses JSON response into native JavaScript objects\n  return response\n}\nfunction proxy(url) {\n  return 'https://cors-anywhere.herokuapp.com/' + url\n}\nasync function getAllFisheriesBycountry(name) {\n  // Default options are marked with *\n  const response = await fetch('./feshries.json')\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (jsons) {\n      return jsons.filter(e => e.fishery_name.replaceAll(/ /g, '').split('|').indexOf(`${name}`) !== -1)\n    });\n  //  return new DOMParser().parseFromString(response, 'text/xml') // parses JSON response into native JavaScript objects\n  return response\n}\n// getAllFisheriesBycountry('Morocco').then(res => {\n//   console.log(res);\n// })\n\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\nconst getMarker = (geos)=>{\n  return geos.map((geo,index) => (\n    <Marker coordinates={[geo[0], geo[1]]} key={index}>\n    <circle r={.4} fill=\"green\" />\n  </Marker>))\n      \n      }\nconst MapChart = ({ setTooltipContent, setRows, fisheries }) => {\n  const [Aria, setAria] = useState()\n  const [fisherie, setFisherie] = useState()\n  const [typographies, setTypographies] = useState()\n  // const [marker,setMarker] = useState()\n  // useEffect(()=>{\n  // },[fisherie])\n  if (JSON.stringify(fisheries) !== JSON.stringify(fisherie)) {\n    setFisherie(fisheries)\n    console.log(fisherie);\n\n    togeoJSON(proxy(fisheries.map_info)).then(res => {\n      setTypographies(getMarker(res.features[1].geometry.coordinates[0]));\n      //console.log(getMarker(res.features[1].geometry.coordinates[0]));\n    })\n  }\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) => {\n              return geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    // console.log(geo.properties);\n                    const { ABBREV,\n                      CONTINENT,\n                      FORMAL_EN,\n                      GDP_MD_EST,\n                      GDP_YEAR,\n                      ISO_A2,\n                      ISO_A3,\n                      NAME,\n                      NAME_LONG,\n                      POP_EST,\n                      POP_RANK,\n                      POP_YEAR,\n                      REGION_UN,\n                      SUBREGION, } = geo.properties;\n                    setTooltipContent({\n                      ABBREV: ABBREV,\n                      CONTINENT: CONTINENT,\n                      FORMAL_EN: FORMAL_EN,\n                      GDP_MD_EST: GDP_MD_EST,\n                      GDP_YEAR: GDP_YEAR,\n                      ISO_A2: ISO_A2,\n                      ISO_A3: ISO_A3,\n                      NAME: NAME,\n                      NAME_LONG: NAME_LONG,\n                      POP_EST: POP_EST,\n                      POP_RANK: POP_RANK,\n                      POP_YEAR: POP_YEAR,\n                      REGION_UN: REGION_UN,\n                      SUBREGION: SUBREGION\n                    })\n                  }\n                  }\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  onClick={\n                    () => {\n                      const { NAME, POP_EST } = geo.properties;\n                      getAllFisheriesBycountry(NAME).then(res => {\n                        var i = 0;\n                        if (Aria === NAME) {\n                          setRows([])\n                        }\n                        setAria(NAME)\n                        setRows(res.map(e => e = { id: i++, ...e }));\n                      })\n                    }\n                  }\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#444\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n\n              ))\n            }\n            }\n          \n            \n          </Geographies>\n          {\n          typographies\n          }\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);","import React,{useState,useRef,useReducer} from 'react';\nimport { Table, Column, HeaderCell, Cell } from 'rsuite-table';\nimport { Rnd } from 'react-rnd';\nimport { IconButton }  from '@material-ui/core'\nimport {AddCircle,RemoveCircle} from '@material-ui/icons'\n// import 'rsuite-table/dist/css/rsuite-table.css'\n\n\n\nconst ImageCell = ({ rowData, dataKey, ...rest }) => (\n  <Cell {...rest}>\n    <img src={rowData[dataKey]} width=\"50\" />\n  </Cell>\n);\nconst initialState = {icon: <AddCircle style={{position:'relative'}}/>,status:false};\n\nfunction reducer(switcher, action) {\n  switch (action.type) {\n    case 'switch':\n      return {icon:switcher.status?<AddCircle style={{position:'relative'}}/>:<RemoveCircle style={{position:'relative'}}/>,status:!switcher.status};\n    default:\n      throw new Error();\n  }\n}\n//https://fishbase.ropensci.org/species?limit=10&FBname=Atlantic%20mackerel&fields=image,BodyShapeI,MainCatchingMethod,Weight,AnaCat,DemersPelag,Fresh,Saltwater,Author,UsedforAquaculture,Comments,FBname,Species,Genus,Importance,PriceCateg,PriceReliability,Length,Vulnerability,Subfamily\nconst DataTable = ({rows,setFisheries}) => {\n // console.log(rows);\n const table = useRef(null)\n const [drog,setDrag] = useState(true)\n const [switcher, dispatch] = useReducer(reducer,initialState)\n  return(\n   <Rnd \n   dragHandleClassName='rs-table-row-header'\n    default={{\n        x: 0,\n        y: 0,\n        width: 400,\n        height:300\n       }}\n         >\n  <Table ref={table} data={rows.map(e=>e={...e,fishery_name:e.fishery_name.replaceAll('|',',')})} wordWrap\n   style={{fontSize:'.6em',width:'100%'}}\n  >\n    <Column  align={'center'} \n         style={{padding:'unset',margin:'unset',maxWidth:'100%'  ,display: 'flex',\n         alignItems: 'center',\n         justifyContent: 'center'}} >\n      <HeaderCell>код(fao.org)</HeaderCell>\n      <Cell dataKey=\"fishery_id\" onClick={(evt)=>{\n        console.log(evt.target);\n      }} />\n    </Column>\n\n    <Column  align={'center'} \n     style={{padding:'unset',margin:'unset',maxWidth:'100%'  ,display: 'flex',\n     alignItems: 'center',\n     justifyContent: 'center'}}\n    >\n      <HeaderCell>промысла</HeaderCell>\n      <Cell dataKey=\"fishery_name\"   />\n    </Column>\n\n    <Column align={'center'} \n         style={{padding:'unset',margin:'unset',maxWidth:'100%'  ,display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'}}>\n      <HeaderCell>запас</HeaderCell>\n      <Cell dataKey='exploiting_stocks' />\n    </Column>\n\n     <Column align={'center'} \n         style={{padding:'unset',margin:'unset' ,display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'}}>\n      <HeaderCell>maps</HeaderCell>\n      <Cell dataKey=\"map_info\"\n      >\n           {\n           (rowData, rowIndex) => \n            (<IconButton aria-label='add'\n            style={{position:'relative',display:'flex',alignItems: 'center',\n            justifyContent: 'center'}}\n            onClick={()=>{\n              switcher.status || (setFisheries(rowData))\n              dispatch({type: 'switch'})\n            }}>\n               {switcher.icon}\n             </IconButton>)\n          }\n      </Cell>\n    </Column>\n    \n  </Table>\n  </Rnd>)\n};\nexport default DataTable;","import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport MapChart from \"./components/MapChart\";\nimport DataTable from './components/table'\nimport {\n    Link,\n    useRouteMatch,\n} from \"react-router-dom\";\nexport default Map;\nfunction Map(props) {\n    const [content, setContent] = useState({});\n    const [rows, setRows] = useState([]);\n    const [fisheries, setFisheries] = useState();\n    return (\n        <div>\n            <MapChart setTooltipContent={setContent} setRows={setRows} fisheries={fisheries}/>\n            <ReactTooltip place=\"bottom\" type=\"light\" effect=\"float\" style={{ display: 'inline',padding:'none',alignItems:'center'\n        ,justifyContent:'left'\n        }}>\n                <ul >\n                    <li><kbd>CONTINENT:</kbd>{content.CONTINENT}</li>\n                    <li><kbd>FORMAL_EN:</kbd>{content.FORMAL_EN}</li>\n                    <li><kbd> GDP_MD_EST:</kbd>{content.GDP_MD_EST}</li>\n                    <li><kbd>GDP_YEAR:</kbd>{content.GDP_YEAR}</li>\n                    <li><kbd>ISO_A2:</kbd>{content.ISO_A2}</li>\n                    <li><kbd>ISO_A3:</kbd>{content.ISO_A3}</li>\n                    <li><kbd>NAME:</kbd>{content.NAME}</li>\n                    <li><kbd>NAME_LONG:</kbd>{content.NAME_LONG}</li>\n                    <li><kbd>POP_EST:</kbd>{content.POP_EST}</li>\n                    <li><kbd>POP_RANK:</kbd>{content.POP_RANK}</li>\n                    <li><kbd>POP_YEAR:</kbd>{content.POP_YEAR}</li>\n                    <li><kbd>REGION_UN:</kbd>{content.REGION_UN}</li>\n                    <li> <kbd>SUBREGION:</kbd>{content.SUBREGION}</li>\n                </ul>\n            </ReactTooltip>\n            <DataTable rows={rows} setFisheries={setFisheries} />\n        </div>\n    );\n}","export default {\n    DbList:    (resource, params) => Promise,\n}\n","\n// in databases.js\nimport * as React from \"react\";\nimport { List, Datagrid, Edit, Create, SimpleForm, DateField, TextField, EditButton, TextInput, DateInput } from 'react-admin';\nimport BookIcon from '@material-ui/icons/Book';\nexport const PostIcon = BookIcon;\n\nexport const DbList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"title\" />\n            <DateField source=\"published_at\" />\n            <TextField source=\"average_note\" />\n            <TextField source=\"views\" />\n            <EditButton basePath=\"/posts\" />\n        </Datagrid>\n    </List>\n);\n\nconst PostTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const PostEdit = (props) => (\n    <Edit title={<PostTitle />} {...props}>\n        <SimpleForm>\n            <TextInput disabled source=\"id\" />\n            <TextInput source=\"title\" />\n            <TextInput source=\"teaser\" options={{ multiLine: true }} />\n            <TextInput multiline source=\"body\" />\n            <DateInput label=\"Publication date\" source=\"published_at\" />\n            <TextInput source=\"average_note\" />\n            <TextInput disabled label=\"Nb views\" source=\"views\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const PostCreate = (props) => (\n    <Create title=\"Create a Post\" {...props}>\n        <SimpleForm>\n            <TextInput source=\"title\" />\n            <TextInput source=\"teaser\" options={{ multiLine: true }} />\n            <TextInput multiline source=\"body\" />\n            <TextInput label=\"Publication date\" source=\"published_at\" />\n            <TextInput source=\"average_note\" />\n        </SimpleForm>\n    </Create>\n);","import { Admin, Resource } from 'react-admin';\nimport dataProvider from './dataprovider';\nimport { DbList } from './databases';\nimport React from 'react';\n// import simpleRestProvider from './ra-strapi-rest';\n\n\n// const dataProvider = simpleRestProvider('http://localhost:1337');\n\nconst DataMg = () => (\n    <Admin dataProvider={dataProvider}>\n        <Resource name=\"contries\" list={DbList} />\n    </Admin>\n);\n\nexport default DataMg;","import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport Map from \"./map\"\nimport DataMg from \"./DataMg\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nfunction App() {\n  return (\n    <>\n    <Router>\n    <Switch>\n      {/* <Route path=\"/about\">\n        <About />\n      </Route> */}\n      <Route path=\"/datamg\">\n        <DataMg />\n      </Route>\n      <Route path=\"/\">\n        <Map />\n      </Route>\n    </Switch>\n   </Router>\n    </>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}